% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/publish.R
\name{deleteWebService}
\alias{deleteWebService}
\title{Delete a Microsoft Azure Web Service}
\usage{
deleteWebService(ws, name)
}
\arguments{
\item{ws}{An AzureML workspace reference returned by \code{\link{workspace}}.}

\item{name}{Either one row from the workspace \code{services} data.frame corresponding to a service to delete, or simply a service name character string.}
}
\value{
The updated data.frame of workspace services is invisibly returned.
}
\description{
Delete a Microsoft Azure Machine Learning  web service from your workspace.
}
\note{
If more than one service matches the supplied \code{name}, the first listed service will be deleted.
}
\examples{
\dontrun{
  # Use a default configuration in ~/.azureml, alternatively
  # see help for `workspace`.
  ws <- workspace()
  
  # Really simple example:
  add <- function(x,y) x + y
  endpoint <- publishWebService(ws, 
                                fun = add, 
                                name = "addme", 
                                inputSchema = list(x="numeric", 
                                                   y="numeric"), 
                                outputSchema = list(ans="numeric"))
  consume(endpoint, list(x=pi, y=2))

  # Now remove the web service named "addme" that we just published
deleteWebService(ws, "addme")
  
  
  # A neat trick to evaluate any expression in the Azure ML virtual
  # machine R session and view its output:
  ep <- publishWebService(ws, 
                          fun = function(expr) {
                            paste(capture.output(
                              eval(parse(text=expr))), collapse="\\n")
                          },
                          name="commander", 
                          inputSchema = list(x = "character"),
                          outputSchema = list(ans = "character"))
  cat(consume(ep, list(x = "getwd()"))$ans)
  cat(consume(ep, list(x = ".packages(all=TRUE)"))$ans)
  cat(consume(ep, list(x = "R.Version()"))$ans)

  # Remove the service we just published
  deleteWebService(ws, "commander")
  
  # The following example illustrates scoping rules. Note that the function
  # refers to the variable y defined outside the function body. That value
  # will be exported with the service.
  y <- pi
  ep <- publishWebService(ws, 
                          fun = function(x) x + y, 
                          name = "lexical scope",
                          inputSchema = list(x = "numeric"), 
                          outputSchema = list(ans = "numeric"))
  cat(consume(ep, list(x=2))$ans)
  
  # Remove the service we just published
  deleteWebService(ws, "lexical scope")
  
  # Example showing the use of consume to score all the rows of a data frame
  # at once. The columns of the data frame correspond to the input parameters
  # of the web service.
  f <- function(a,b,c,d) list(sum = a+b+c+d, prod = a*b*c*d)
  ep <-  publishWebService(ws, 
                           f, 
                           name = "rowSums",
                           inputSchema = list(
                             a="numeric", 
                             b="numeric", 
                             c="numeric", 
                             d="numeric"
                           ),
                           outputSchema = list(
                             sum ="numeric", 
                             prod = "numeric")
  )
  x <- head(iris[,1:4])  # First four columns of iris
  
  # Note the following will FAIL because of a name mismatch in the arguments
  # (with an informative error):
  consume(ep, x, retryDelay=1)
  # We need the columns of the data frame to match the inputSchema:
  names(x) <- letters[1:4]
  # Now we can evaluate all the rows of the data frame in one call:
  consume(ep, x)
  # output should look like:
  #    sum    prod
  # 1 10.2   4.998
  # 2  9.5   4.116
  # 3  9.4  3.9104
  # 4  9.4   4.278
  # 5 10.2    5.04
  # 6 11.4 14.3208
  
  # Remove the service we just published
  deleteWebService(ws, "rowSums")
}
}
\seealso{
\code{\link{services}} \code{\link{publishWebService}} \code{\link{updateWebService}}

Other publishing functions: \code{\link{publishWebService}},
  \code{\link{updateWebService}}; \code{\link{workspace}}
}

