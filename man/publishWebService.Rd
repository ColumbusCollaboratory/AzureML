% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/publish.R
\name{publishWebService}
\alias{publishWebService}
\title{Publish a function to Microsoft Azure}
\usage{
publishWebService(ws, fun, serviceName, inputSchema, outputSchema,
  export = character(0), noexport = character(0), packages,
  version = "3.1.0")
}
\arguments{
\item{fun}{a function to publish; the function must have at least one argument}

\item{serviceName}{name of the new web service}

\item{inputSchema}{a list of \code{fun} input parameters and their AzureML types
formatted as \code{list("arg1"="type", "arg2"="type", ...)}; see the note below
for details}

\item{outputSchema}{list of \code{fun} outputs and AzureML types,
formmated as \code{list("output1"="type", "output2"="type", ...)}}

\item{export}{optional character vector of variable names to explicitly export
in the web service for use by the function. See the note below.}

\item{noexport}{optional character vector of variable names to prevent from exporting
in the web service}

\item{packages}{optional character vector of R packages required by the function}

\item{version}{optional R version string for required packages (the version of R running in the AzureML Web Service)}
}
\value{
A data.frame describing the new service endpoints, cf. \code{link{endpoints}}. The output
 can be directly used by the \code{\link{consumeLists}} function.
}
\description{
Publish a function to Microsoft Azure Machine Learning as a web service. The
web service created is a standard Azure ML web service, and can be utilized
from any web or mobile platform. as long as the user has the API key and URL.
The function to be published is limited to inputs/outputs consisting of
lists of scalar values.
}
\note{
AzureML data types are different than, but related to, R types. You may specify
 the R types \code{numeric, logical, integer,} and \code{character} and those will
 be specified as AzureML types \code{double, boolean, int32, string}, respectively.

The \code{publishWebService} function automatically exports objects required by the function
to a working environment in the AzureML machine, including objects accessed within the function
using lexical scoping rules. Use the \code{exports} parameter to explicitly include other objects that
are needed. Use \code{noexport} to explicitlt prevent objects from being exported.
}
\examples{
\dontrun{
# Use a default configuration in ~/.azureml/config, alternatively
# see help for `workspace`.
ws <- workspace()

# Really simple example:
add <- function(x,y) x + y
endpoint <- publishWebService(ws, add, "add_service",
              list(x="numeric", y="numeric"), list(ans="numeric"))
result <- consumeLists(endpoint, list(x=pi, y=2))
result$ans

# A neat trick to evaluate any expression  and view its output:
p <- publishWebService(ws, fun=function(expr) {
       paste(capture.output(eval(parse(text=expr))), collapse="\\n")},
       name="commander", inputSchema=list(x="character"),
       outputSchema=list(ans="character"))
cat(consumeList(ep, list=(expr="getwd()"))$ans)
cat(consumeList(ep, list=(expr=".packages(all=TRUE)"))$ans)

# The following example illustrates scoping rules. Note that the function
# refers to the variable y defined outside the function body. That value
# will be exported with the service.
y <- pi
ep <- publishWebService(ws, fun=function(x) x + y, name="lexi",
        inputSchema=list(x="numeric"), outputSchema=list(ans="numeric"))
cat(consumeList(ep, list(x=2))$ans)
}
}
\seealso{
\code{\link{endpoints}} \code{\link{discoverSchema}} \code{\link{consumeLists}} \code{\link{services}}

Other publishing functions: \code{\link{workspace}}
}

